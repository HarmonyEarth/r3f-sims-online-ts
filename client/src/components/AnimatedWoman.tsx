/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 .\public\models\Animated Woman.glb -o .\src\components\AnimatedWoman.tsx --types -r public 
*/

import * as THREE from "three";
import type { Group, Object3DEventMap } from "three";
import React, { useEffect, useMemo, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF, SkeletonUtils } from "three-stdlib";
import { useFrame, useGraph } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    Casual_Body_1: THREE.SkinnedMesh;
    Casual_Body_2: THREE.SkinnedMesh;
    Casual_Feet_1: THREE.SkinnedMesh;
    Casual_Feet_2: THREE.SkinnedMesh;
    Casual_Head_1: THREE.SkinnedMesh;
    Casual_Head_2: THREE.SkinnedMesh;
    Casual_Head_3: THREE.SkinnedMesh;
    Casual_Head_4: THREE.SkinnedMesh;
    Casual_Legs: THREE.SkinnedMesh;
    Root: THREE.Bone;
  };
  materials: {
    White: THREE.MeshStandardMaterial;
    Skin: THREE.MeshStandardMaterial;
    Grey: THREE.MeshStandardMaterial;
    Hair_Blond: THREE.MeshStandardMaterial;
    Hair_Brown: THREE.MeshStandardMaterial;
    Brown: THREE.MeshStandardMaterial;
    Orange: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

type ActionName =
  | "CharacterArmature|Death"
  | "CharacterArmature|Gun_Shoot"
  | "CharacterArmature|HitRecieve"
  | "CharacterArmature|HitRecieve_2"
  | "CharacterArmature|Idle"
  | "CharacterArmature|Idle_Gun"
  | "CharacterArmature|Idle_Gun_Pointing"
  | "CharacterArmature|Idle_Gun_Shoot"
  | "CharacterArmature|Idle_Neutral"
  | "CharacterArmature|Idle_Sword"
  | "CharacterArmature|Interact"
  | "CharacterArmature|Kick_Left"
  | "CharacterArmature|Kick_Right"
  | "CharacterArmature|Punch_Left"
  | "CharacterArmature|Punch_Right"
  | "CharacterArmature|Roll"
  | "CharacterArmature|Run"
  | "CharacterArmature|Run_Back"
  | "CharacterArmature|Run_Left"
  | "CharacterArmature|Run_Right"
  | "CharacterArmature|Run_Shoot"
  | "CharacterArmature|Sword_Slash"
  | "CharacterArmature|Walk"
  | "CharacterArmature|Wave";
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}
// type ContextType = Record<
//   string,
//   React.ForwardRefExoticComponent<
//     JSX.IntrinsicElements["skinnedMesh"] | JSX.IntrinsicElements["bone"]
//   >
// >;

type ExtendedObject3D = THREE.Object3D<THREE.Object3DEventMap> & {
  geometry?: THREE.BufferGeometry;
  skeleton?: THREE.Skeleton;
};

interface AnimatedWomanProps
  extends React.HTMLAttributes<JSX.IntrinsicElements["group"]> {
  hairColor?: string;
  topColor?: string;
  bottomColor?: string;
  position?: THREE.Vector3;
}

export function AnimatedWoman({
  hairColor = "yellow",
  topColor = "pink",
  bottomColor = "black",
  ...props
}: AnimatedWomanProps) {
  const position = useMemo(() => props.position, [props.position]);

  const group = useRef<Group<Object3DEventMap>>(null);
  const { scene, materials, animations } = useGLTF(
    "/models/Animated Woman.glb"
  ) as GLTFResult;

  // Skinned meshes cannot be re-used in threejs without cloning them
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  // useGraph creates two flat object collections for nodes and materials
  const { nodes } = useGraph(clone);

  const { actions } = useAnimations(animations, group);

  const [animation, setAnimation] = useState<ActionName>(
    "CharacterArmature|Idle"
  );

  useEffect(() => {
    const currentAnimation = actions[animation];

    currentAnimation?.reset()?.fadeIn(0.32)?.play();

    return () => {
      currentAnimation?.fadeOut(0.32);
    };
  }, [animation, actions]);

  useFrame(() => {
    if (group.current?.position && props.position) {
      if (group.current.position.distanceTo(props.position) > 0.1) {
        const direction = group.current.position
          .clone()
          .sub(props.position)
          .normalize()
          .multiplyScalar(0.1);
        group.current.position.sub(direction);
        group.current.lookAt(props.position);
        setAnimation("CharacterArmature|Run");
      } else {
        setAnimation("CharacterArmature|Idle");
      }
    }
  });

  return (
    //@ts-expect-error Not sure how to solve type error
    <group ref={group} {...props} position={position} dispose={null}>
      <group name="Root_Scene">
        <group name="RootNode">
          <group
            name="CharacterArmature"
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          >
            <primitive object={nodes.Root} />
          </group>
          <group name="Casual_Body" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <skinnedMesh
              name="Casual_Body_1"
              geometry={(nodes.Casual_Body_1 as ExtendedObject3D).geometry}
              material={materials.White}
              skeleton={(nodes.Casual_Body_1 as ExtendedObject3D).skeleton}
            >
              <meshStandardMaterial color={topColor} />
            </skinnedMesh>
            <skinnedMesh
              name="Casual_Body_2"
              geometry={(nodes.Casual_Body_2 as ExtendedObject3D).geometry}
              material={materials.Skin}
              skeleton={(nodes.Casual_Body_2 as ExtendedObject3D).skeleton}
            />
          </group>
          <group name="Casual_Feet" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <skinnedMesh
              name="Casual_Feet_1"
              geometry={(nodes.Casual_Feet_1 as ExtendedObject3D).geometry}
              material={materials.Skin}
              skeleton={(nodes.Casual_Feet_1 as ExtendedObject3D).skeleton}
            />
            <skinnedMesh
              name="Casual_Feet_2"
              geometry={(nodes.Casual_Feet_2 as ExtendedObject3D).geometry}
              material={materials.White}
              skeleton={(nodes.Casual_Feet_2 as ExtendedObject3D).skeleton}
            />
          </group>
          <group name="Casual_Head" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <skinnedMesh
              name="Casual_Head_1"
              geometry={(nodes.Casual_Head_1 as ExtendedObject3D).geometry}
              material={materials.Skin}
              skeleton={(nodes.Casual_Head_1 as ExtendedObject3D).skeleton}
            />
            <skinnedMesh
              name="Casual_Head_2"
              geometry={(nodes.Casual_Head_2 as ExtendedObject3D).geometry}
              material={materials.Hair_Blond}
              skeleton={(nodes.Casual_Head_2 as ExtendedObject3D).skeleton}
            >
              <meshStandardMaterial color={hairColor} />
            </skinnedMesh>
            <skinnedMesh
              name="Casual_Head_3"
              geometry={(nodes.Casual_Head_3 as ExtendedObject3D).geometry}
              material={materials.Hair_Brown}
              skeleton={(nodes.Casual_Head_3 as ExtendedObject3D).skeleton}
            />
            <skinnedMesh
              name="Casual_Head_4"
              geometry={(nodes.Casual_Head_4 as ExtendedObject3D).geometry}
              material={materials.Brown}
              skeleton={(nodes.Casual_Head_4 as ExtendedObject3D).skeleton}
            />
          </group>
          <skinnedMesh
            name="Casual_Legs"
            geometry={(nodes.Casual_Legs as ExtendedObject3D).geometry}
            material={materials.Orange}
            skeleton={(nodes.Casual_Legs as ExtendedObject3D).skeleton}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          >
            <meshStandardMaterial color={bottomColor} />
          </skinnedMesh>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/models/Animated Woman.glb");
